/**
 * {{{description}}}
 * @export
 * @interface {{classname}}
 */
export interface {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{
{{#additionalPropertiesType}}
    [key: string]: {{{additionalPropertiesType}}}{{#hasVars}} | any{{/hasVars}};

{{/additionalPropertiesType}}
{{#vars}}
    /**
     * {{{description}}}
     * @type {{=<% %>=}}{<%&datatype%>}<%={{ }}=%>
     * @memberof {{classname}}
     */
    {{name}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
{{/vars}}
}

const validate{{classname}}Response = function(input: any) {
    let data = input;
    if (typeof data === 'string') {
        try {
            data = JSON.parse(data);
        } catch (e) {
            throw new Error('invalid json response');
        }
    }
    const error = new Error('response data validation error');
{{#vars}}
    {{#required}}if(data.{{name}} === undefined){throw error;}{{/required}}
    {{^isNullable}}if(data.{{name}} === null){throw error;}{{/isNullable}}
    if({{^required}}data.{{name}} !== undefined && {{/required}}
        {{#isNullable}}data.{{name}} !== null && {{/isNullable}}
        typeof data.{{name}} !== '{{dataType}}'){throw error;}
{{/vars}}
    return data;
};


{{#hasEnums}}

/**
 * @export
 * @namespace {{classname}}
 */
export namespace {{classname}} {
{{#vars}}
    {{#isEnum}}
    /**
     * @export
     * @enum {string}
     */
    export enum {{enumName}} {
    {{#allowableValues}}
        {{#enumVars}}
        {{{name}}} = {{{value}}}{{^-last}},{{/-last}}
        {{/enumVars}}
    {{/allowableValues}}
    }
    {{/isEnum}}
{{/vars}}
}{{/hasEnums}}
